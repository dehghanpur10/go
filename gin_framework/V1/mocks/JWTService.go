// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JWTService is an autogenerated mock type for the JWTService type
type JWTService struct {
	mock.Mock
}

// Generator provides a mock function with given fields: _a0
func (_m *JWTService) Generator(_a0 map[string]interface{}) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDependencyTest provides a mock function with given fields:
func (_m *JWTService) SetDependencyTest() {
	_m.Called()
}

// Validator provides a mock function with given fields: token
func (_m *JWTService) Validator(token string) (bool, map[string]interface{}, error) {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string) map[string]interface{}); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
