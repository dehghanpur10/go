// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "V1/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserCollection is an autogenerated mock type for the UserCollection type
type UserCollection struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, pipeline
func (_m *UserCollection) Aggregate(ctx context.Context, pipeline interface{}) (*models.User, error) {
	ret := _m.Called(ctx, pipeline)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *models.User); ok {
		r0 = rf(ctx, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: ctx, user
func (_m *UserCollection) InsertOne(ctx context.Context, user interface{}) (primitive.ObjectID, error) {
	ret := _m.Called(ctx, user)

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) primitive.ObjectID); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, filter, update
func (_m *UserCollection) UpdateOne(ctx context.Context, filter interface{}, update interface{}) error {
	ret := _m.Called(ctx, filter, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) error); ok {
		r0 = rf(ctx, filter, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
